{
  
    
        "post0": {
            "title": "Setup Multiple MySql's with homebrew in Mac local machine",
            "content": "Setup Multiple MySql’s with homebrew in Mac local machine . Had a specific scenario in my projects where two services are using MySql but different versions. So had to switch between different MySql versions on demand. . Will try to support for brew version For homebrew version 0.9.5. brew -v # =&gt; Homebrew 0.9.5 . | Install the current/latest version of mysql. | . # Install current mysql version brew install mysql # Start agent for current version of mysql (including on login) ln -sfv /usr/local/opt/mysql/*.plist ~/Library/LaunchAgents launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist . Install the older/Specific version of mysql. | . # Find older mysql versions brew search mysql # Install older mysql version brew install homebrew/versions/mysql56 # Start agent for older version of mysql (including on login) ln -sfv /usr/local/opt/mysql56/*.plist ~/Library/LaunchAgents launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mysql56.plist . Then to switch to the older version. | . # Unlink current mysql version brew unlink mysql # Check older mysql version ls /usr/local/Cellar/mysql56 # =&gt; 5.6.27 # Link the older version brew switch mysql56 5.6.27 . switch back to the current version. | . # Unlink older mysql version brew unlink mysql56 # Check current mysql version ls /usr/local/Cellar/mysql # =&gt; 5.7.10 # Link the current version brew switch mysql 5.7.10 . Verify which mysql version you’re on at any time. | . # Check which version of mysql is currently symlinked ls -l /usr/local/bin/mysql # =&gt; /usr/local/bin/mysql@ -&gt; ../Cellar/mysql56/5.6.27/bin/mysql # Or using the mysql command mysql --version . unload a mysql agent for a given version. | . # Stop agent for current version of mysql launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist rm ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist # Stop agent for older version of mysql launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.mysql56.plist rm ~/Library/LaunchAgents/homebrew.mxcl.mysql56.plist .",
            "url": "https://iamurali.github.io/2020-08-17-multiple-mysql-versions/",
            "relUrl": "/2020-08-17-multiple-mysql-versions/",
            "date": " • Aug 17, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Template Rendering with Dynamic context",
            "content": "Template Rendering with Dynamic context . Problem Statement . In one of projects when we had to build a service to generate history for a particular entity if there are changes occurs. we had to build a template engine which can translate the entity changes in humar redable format. . Formatting text as YAML: . entity: Event - changes: from: 2020-08-15 to: 2020-08-17 - expected_format: &quot;Event rescheduled event from Aug 15th to Augh 17th by bob (Current User)&quot; . Solution: . We have utilized the concept of Binding class able to encapsulate execution context of the receiver object. . For simplicity we chose ERB, we can place them within locale files for internationalisation and can be edit them with ease if need arises. . Since we extend OpenStruct we can simply pass a hash to it during instantiation and all the keys will be accessible as methods and will be exposed directly during rendering. . require &#39;erb&#39; require &#39;ostruct&#39; include ERB::Util module AuditMessage class ErbTemplate &lt; OpenStruct def render(template) ERB.new(template).result(binding) end def current_user # ===&gt; Fetch current user user_id, user_type = self[:_audit].user_id, self[:_audit].user_type user_type.classify.constantize.find(user_id) rescue self[:user] end def system_user OpenStruct.new(name: &quot;System User&quot;) end def get_old_value(field) # ===&gt; Try to fetch the old value from the audit # {&quot;field&quot;: [&quot;old_value&quot;, &quot;new_value&quot;]} get_value(self[field]) end def get_new_value(field) # ===&gt; Try to fetch the old value from the audit # {&quot;field&quot;: [&quot;old_value&quot;, &quot;new_value&quot;]} get_value(self[field], &quot;new_value&quot;) end def method_missing(method, *args, &amp;block) respond_to?(method) ? self[method] : self[:_auditable].send(method, *args) end private def get_value(value, default_data=&quot;old_value&quot;) return if value.nil? return send(value) unless value.is_a?(Array) return default_data == &quot;old_value&quot; ? value.first : value.last end end end . In the above example we have used ERB templating engine for parsing the text that we wanted with binding of current context. . We added extra methods like current_user who has changed the entity. This particular methods can be available through the context which can be used for back trace or additional info to be passed. . entity: event: update: message: &gt;- &lt;%= Event rescheduled event from #{format(old_value)} to #{format(old_value)} by #{current_user.name}&quot; (Current User) %&gt; . If we try to this particular example engine will look for the enity event and update action and generate custom message with the template passed to the parser. It tries to find the methods in the context of the current entity if there are any. . The benefit of creating a separate abstraction is that it creates a sandbox environment for the template processing. This allows us to have more control over what gets exposed during processing and prevents accidental leakages into the context. . The main method here is the render method, where we utilise the ERB library. We create an ERB instance with the supplied template string and then call result, to which we supply the current execution context using the current binding. . The usage would look something like this : . class Event attr_accessor :event_date end vars = { old_value: &quot;2020-08-15&quot;, new_value: &quot;2020-08-17&quot; } template_string = &quot;entity.#{klass_name}.#{_action}.message&quot; AuditMessage::ErbTemplate.new(vars).render(template_string) #===&gt; result: &quot;Event rescheduled event from Aug 15th to Augh 17th by bob (Current User)&quot; .",
            "url": "https://iamurali.github.io/2020-08-15-dynamic-context-with-ruby/",
            "relUrl": "/2020-08-15-dynamic-context-with-ruby/",
            "date": " • Aug 15, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://iamurali.github.io/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hey there, I’m Murali Kummitha, currently working for Jifflenow as a Principle Software Engineer. I love technology and always follow the advancements in technology, especially in the topic of web apps, Machine Learning. I have a passion for designing and creating things, notably with code. When I’m not coding, I enjoy travelling to himalays. I live in Bangalore. . In this blog, I share things on my mind, my learnings, and my interests of all kind. Feel free to exchange ideas with me with below options: . Email: murali.kummitha@gmail.com | LinkedIn: https://www.linkedin.com/in/muralikummitha | GitHub: https://github.com/iamurali | .",
          "url": "https://iamurali.github.io/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://iamurali.github.io/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}